h1. SimpleData

h3. A friendly abstraction for CoreData

Aim: Gain all the speed of CoreData but with a friendly, ActiveRecord style interface. 

h2. Step 1: Install SimpleData
* Add the SimpleData repository to your project
* Add all the .m files in Lib to your target
** Right click the .m file
** In the target tab, check the box for your target

h2. Step 2: Create a data model
* Go to  File > New File then choosing Resource > Data Model
* Open the data model and edit it to your hearts desire
* Tip: you might want to create date attributes called createdAt and updatedAt as they will come on handy later

h2. Step 3: Create the class representations
* In the data model editor, select classes you wish to use in your project
* Choose File > New File. In the New File dialog, select Managed Object Class.
* Depending on the version of Xcode you’re using, the Managed Object Class may be available in the iPhone OS section under Cocoa Touch Classes, or you may need to choose the template in the Mac OS X section, under Cocoa—either will work correctly.
* Click Next. The correct location and targets should have been selected for you. Click Next to accept them.
* You should see the Entity selection pane, with the Event entity selected. The “Generate accessors” and “Generate Objective-C 2.0 properties” options should also be selected.
* Click Finish to generate the files.
* In the header files for the generated classes, replace ": NSManagedObject" with ": SimpleModel"

You are now ready to start working with SimpleData

h2. Step 4: Create a SimpleStore
* First, import the SimpleStore header
<code>#import <SimpleStore.h></code>
* To create or open an existing database simply call:
<code>[SimpleStore storeWithPath:@"path"];</code>

h2. Step 5: Enjoy!
* To create an object:
<pre><code>[User createWithAttributes:attributesDict];
[User createWithName:@"Brian" email:@"bricollins@gmail.com"];
[User createWithEmail:@"john@example.com" name:@"John"];</code></pre>
* To find an object:
<pre><code>[User findByName:@"Brian"];
[User findAll]
NSArray *users = [User findAllByStarSign:@"Libra" sortBy:@"name" sortByDescending:@"createdAt"];</code></pre>
* To update an object:
<pre><code>User *u = [User findByName:@"Brian"];
u.name = @"Brian Collins";
[u save];</code></pre>
* Setting non object attributes (unfortunately):
<pre><code>[User createWithName:@"Brian" 
 smoker:[NSNumber numberWithBool:NO]];</code></pre>
* Find or create an object if it doesn't exist:
<pre><code>[User findOrCreateByName:@"Brian" email:@"brian@example.com"].email; // => @"brian@example.com"
[User findOrCreateByName:@"Brian" email:@"brian@foo.com"].email; // => @"brian@example.com" because it exists</code></pre>

h2. Running the test suite
* Build and run with the target "Test" and watch the log output

h2. Displaying SimpleData objects in a tableView
* Subclass SDTableViewController

h2. Limitations
* Currently,
** You may only have one SimpleStore open per thread.
** There is no validation, but the standard coredata validation should still work.
** You will get warnings unless you prototype the methods you use. "See this wiki article":http://wiki.github.com/briancollins/SimpleData/stopping-compiler-warnings

h2. See Also
* "SQLite Persistent Objects":http://code.google.com/p/sqlitepersistentobjects/ the same idea but for naked sqlite. More mature.
